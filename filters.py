from aiogram.filters import BaseFilter
from aiogram.types import Message, ChatType, CallbackQuery
from typing import Union, Optional
import asyncio
from config import Config
from storage import get_user_level

class IsPrivateChat(BaseFilter):
    """–§–∏–ª—å—Ç—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —á–∞—Ç–∞"""
    async def __call__(self, message: Message) -> bool:
        return message.chat.type == ChatType.PRIVATE

class IsOwnerOrPrivate(BaseFilter):
    """–§–∏–ª—å—Ç—Ä: –ª–∏–±–æ –≤–ª–∞–¥–µ–ª–µ—Ü, –ª–∏–±–æ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç"""
    async def __call__(self, message: Message) -> bool:
        user_id = message.from_user.id
        user_level = get_user_level(user_id)
        
        # –í–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç –ø–∏—Å–∞—Ç—å –≤–µ–∑–¥–µ
        if user_level == 3:  # –í–ª–∞–¥–µ–ª–µ—Ü
            return True
        
        # –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
        return message.chat.type == ChatType.PRIVATE

class IsOwnerAndAdmin(BaseFilter):
    """–§–∏–ª—å—Ç—Ä: –≤–ª–∞–¥–µ–ª–µ—Ü –∏ –±–æ—Ç —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    async def __call__(self, message: Message) -> bool:
        user_id = message.from_user.id
        user_level = get_user_level(user_id)
        
        # –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü
        if user_level != 3:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ —ç—Ç–æ–º —á–∞—Ç–µ
        try:
            chat_member = await message.bot.get_chat_member(
                message.chat.id, 
                message.bot.id
            )
            return chat_member.status in ['administrator', 'creator']
        except:
            return False

class IsOwnerAnywhere(BaseFilter):
    """–§–∏–ª—å—Ç—Ä: –≤–ª–∞–¥–µ–ª–µ—Ü –≤ –ª—é–±–æ–º —á–∞—Ç–µ"""
    async def __call__(self, message: Message) -> bool:
        user_id = message.from_user.id
        user_level = get_user_level(user_id)
        return user_level == 3  # –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü

class IsPrivateOrOwnerAdmin(BaseFilter):
    """–§–∏–ª—å—Ç—Ä: –ª–∏–±–æ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç, –ª–∏–±–æ –≤–ª–∞–¥–µ–ª–µ—Ü —Å –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    async def __call__(self, message: Message) -> bool:
        user_id = message.from_user.id
        user_level = get_user_level(user_id)
        
        # –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
        if message.chat.type == ChatType.PRIVATE:
            return True
        
        # –í–ª–∞–¥–µ–ª–µ—Ü —Å –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if user_level == 3:
            try:
                chat_member = await message.bot.get_chat_member(
                    message.chat.id, 
                    message.bot.id
                )
                return chat_member.status in ['administrator', 'creator']
            except:
                return False
        
        return False

class IsModerator(BaseFilter):
    """–§–∏–ª—å—Ç—Ä: –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –∏–ª–∏ –≤—ã—à–µ"""
    async def __call__(self, message: Message) -> bool:
        user_id = message.from_user.id
        user_level = get_user_level(user_id)
        return user_level >= 1  # –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –∏ –≤—ã—à–µ

class IsTechModerator(BaseFilter):
    """–§–∏–ª—å—Ç—Ä: —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –∏–ª–∏ –≤—ã—à–µ"""
    async def ____call__(self, message: Message) -> bool:
        user_id = message.from_user.id
        user_level = get_user_level(user_id)
        return user_level >= 2  # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –∏ –≤—ã—à–µ

class IsOwner(BaseFilter):
    """–§–∏–ª—å—Ç—Ä: —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü"""
    async def __call__(self, message: Message) -> bool:
        user_id = message.from_user.id
        user_level = get_user_level(user_id)
        return user_level == 3  # –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü

class RateLimitFilter(BaseFilter):
    def __init__(self, limit: int = 5, period: int = 60):
        self.limit = limit
        self.period = period
        self.user_messages = {}

    async def __call__(self, message: Message) -> bool:
        user_id = message.from_user.id
        now = asyncio.get_event_loop().time()
        
        if user_id not in self.user_messages:
            self.user_messages[user_id] = []
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        self.user_messages[user_id] = [
            ts for ts in self.user_messages[user_id] 
            if now - ts < self.period
        ]
        
        if len(self.user_messages[user_id]) >= self.limit:
            await message.answer("üö´ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.")
            return False
        
        self.user_messages[user_id].append(now)
        return True

class CallbackOwnerFilter(BaseFilter):
    """–§–∏–ª—å—Ç—Ä –¥–ª—è callback'–æ–≤: —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü"""
    async def __call__(self, callback: CallbackQuery) -> bool:
        user_id = callback.from_user.id
        user_level = get_user_level(user_id)
        return user_level == 3
