import logging
import asyncio
import sys
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.fsm.storage.redis import RedisStorage
from aiogram.types import ErrorEvent

from config import Config
from storage import user_levels, set_user_level, init_punishment_system, load_initial_data, cleanup_old_data
from database import init_database, db
from filters import RateLimitFilter
from handlers import send_error_log

# –ò–º–ø–æ—Ä—Ç—ã –∫–æ–º–∞–Ω–¥
from commands import (
    cmd_start, cmd_pending, cmd_checkprofile, cmd_setlevel, 
    cmd_getid, cmd_help, cmd_stats, cmd_users, cmd_mods,
    cmd_settings, cmd_backup, cmd_status, cmd_emergency,
    cmd_reports, handle_cancel, handle_new_message, handle_admin_callback,
    register_commands  # –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥
)

from handlers import (
    handle_text_message, handle_photo_message, handle_video_message,
    handle_voice_message, handle_video_note_message, handle_sticker_message,
    handle_document_message, handle_moderation, handle_punishment_callback,
    handle_punishment_reason, PunishmentStates
)

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log', encoding='utf-8'),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

async def global_error_handler(event: ErrorEvent):
    logger.error(f"Global error: {event.exception}", exc_info=event.exception)
    await send_error_log("Global Error", str(event.exception))

async def background_tasks():
    """–§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã"""
    while True:
        try:
            # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã
            cleanup_old_data()
            logger.info("‚úÖ –§–æ–Ω–æ–≤–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
            if db and not db.connection.is_connected():
                logger.warning("üì° –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MySQL...")
                db.connect()
            
            await asyncio.sleep(3600)  # –ö–∞–∂–¥—ã–π —á–∞—Å
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ: {e}")
            await asyncio.sleep(300)  # –ñ–¥–µ–º 5 –º–∏–Ω—É—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ

async def database_health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    while True:
        try:
            if db and db.connection.is_connected():
                # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–º
                with db.get_cursor() as cursor:
                    cursor.execute("SELECT 1")
                    logger.debug("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: OK")
            else:
                logger.warning("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
                
            await asyncio.sleep(300)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è –ë–î: {e}")
            await asyncio.sleep(60)

async def startup_tasks():
    """–ó–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω—è–µ–º—ã–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    logger.info("üöÄ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á –∑–∞–ø—É—Å–∫–∞...")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã
    try:
        load_initial_data()
        logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(user_levels)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Ä–æ–≤–Ω–µ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    try:
        set_user_level(Config.MODERATOR_ID, 1)
        set_user_level(Config.OWNER_ID, 3)
        logger.info("‚úÖ –£—Ä–æ–≤–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —É—Ä–æ–≤–Ω–µ–π: {e}")
    
    # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    try:
        cleanup_old_data()
        logger.info("‚úÖ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

async def shutdown_tasks():
    """–ó–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω—è–µ–º—ã–µ –ø—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏ –±–æ—Ç–∞"""
    logger.info("üõë –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á –≤—ã–∫–ª—é—á–µ–Ω–∏—è...")
    
    # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π
    if db:
        db.disconnect()
        logger.info("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ")
    
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã –Ω–∞–∫–∞–∑–∞–Ω–∏–π
    if 'punishment_system' in globals():
        await punishment_system.stop()
        logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –Ω–∞–∫–∞–∑–∞–Ω–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

async def main():
    try:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        Config.validate()
        logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö MySQL
        if not init_database(
            Config.MYSQL_HOST,
            Config.MYSQL_USER, 
            Config.MYSQL_PASSWORD,
            Config.MYSQL_DATABASE
        ):
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ MySQL")
            return
        
        logger.info("‚úÖ MySQL –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis –¥–ª—è FSM
        storage = RedisStorage.from_url('redis://localhost:6379/0')
        bot = Bot(token=Config.BOT_TOKEN)
        dp = Dispatcher(storage=storage)
        
        # –ó–∞–¥–∞—á–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        await startup_tasks()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º
        punishment_system = init_punishment_system(bot)
        await punishment_system.start()
        logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –Ω–∞–∫–∞–∑–∞–Ω–∏–π –∑–∞–ø—É—â–µ–Ω–∞")
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫
        dp.errors.register(global_error_handler)
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        dp.message.register(cmd_start, Command("start"))
        dp.message.register(cmd_pending, Command("pending"))
        dp.message.register(cmd_checkprofile, Command("checkprofile"))
        dp.message.register(cmd_setlevel, Command("setlevel"))
        dp.message.register(cmd_getid, Command("getid"))
        dp.message.register(cmd_help, Command("help"))
        dp.message.register(cmd_stats, Command("stats"))
        dp.message.register(cmd_users, Command("users"))
        dp.message.register(cmd_mods, Command("mods"))
        dp.message.register(cmd_settings, Command("settings"))
        dp.message.register(cmd_backup, Command("backup"))
        dp.message.register(cmd_status, Command("status"))
        dp.message.register(cmd_emergency, Command("emergency"))
        dp.message.register(cmd_reports, Command("reports"))

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        register_commands(dp)

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        dp.message.register(handle_cancel, F.text == "‚úñÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å")
        dp.message.register(handle_new_message, F.text == "‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å rate limiting
        rate_limit = RateLimitFilter(limit=5, period=60)
        dp.message.register(handle_text_message, F.text & rate_limit)
        dp.message.register(handle_photo_message, F.photo & rate_limit)
        dp.message.register(handle_video_message, F.video & rate_limit)
        dp.message.register(handle_voice_message, F.voice & rate_limit)
        dp.message.register(handle_video_note_message, F.video_note & rate_limit)
        dp.message.register(handle_sticker_message, F.sticker & rate_limit)
        dp.message.register(handle_document_message, F.document & rate_limit)

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback'–æ–≤
        dp.callback_query.register(handle_moderation, F.data.startswith("approve_") | F.data.startswith("reject_"))
        dp.callback_query.register(handle_punishment_callback, F.data.startswith("mute_") | F.data.startswith("warn_") | F.data.startswith("ban_"))
        dp.callback_query.register(handle_admin_callback, F.data.startswith("users_") | F.data.startswith("mods_") | 
                                  F.data.startswith("setting_") | F.data.startswith("backup_") | 
                                  F.data.startswith("emergency_") | F.data.startswith("report_"))

        dp.message.register(handle_punishment_reason, PunishmentStates.waiting_for_reason)

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
        asyncio.create_task(background_tasks())
        asyncio.create_task(database_health_check())
        
        logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        logger.info(f"üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ø–∞–º—è—Ç–∏: {len(user_levels)}")
        logger.info(f"üì® –°–æ–æ–±—â–µ–Ω–∏–π –≤ –æ—á–µ—Ä–µ–¥–∏: {len(getattr(storage, 'pending_messages', {}))}")
        logger.info(f"üóÑÔ∏è  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {Config.MYSQL_DATABASE} –Ω–∞ {Config.MYSQL_HOST}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–ª–∏–Ω–≥
        await dp.start_polling(bot)
        
    except Exception as e:
        logger.critical(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞: {e}", exc_info=True)
        await shutdown_tasks()
        sys.exit(1)

if __name__ == "__main__":
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ graceful shutdown
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        asyncio.run(shutdown_tasks())
    except Exception as e:
        logger.critical(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        asyncio.run(shutdown_tasks())
        sys.exit(1)
