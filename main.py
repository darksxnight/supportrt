import logging
import asyncio
import sys
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command, ChatType
from aiogram.fsm.storage.redis import RedisStorage
from aiogram.types import ErrorEvent
from aiogram.exceptions import TelegramForbiddenError

from config import Config
from storage import user_levels, set_user_level, init_punishment_system, load_initial_data, cleanup_old_data
from storage import get_system_health, get_cache_stats, process_message_queue
from database import init_database, db
from redis_storage import redis_storage
from filters import RateLimitFilter, IsPrivateOrOwnerAdmin, IsOwnerAnywhere, IsOwnerAndAdmin
from handlers import send_error_log, handle_permission_error

# –ò–º–ø–æ—Ä—Ç—ã –∫–æ–º–∞–Ω–¥
from commands import (
    cmd_start, cmd_pending, cmd_checkprofile, cmd_setlevel, 
    cmd_getid, cmd_help, cmd_stats, cmd_users, cmd_mods,
    cmd_settings, cmd_backup, cmd_status, cmd_emergency,
    cmd_reports, handle_cancel, handle_new_message, handle_admin_callback,
    register_commands, cmd_mystats, cmd_system
)

from handlers import (
    handle_text_message, handle_photo_message, handle_video_message,
    handle_voice_message, handle_video_note_message, handle_sticker_message,
    handle_document_message, handle_moderation, handle_punishment_callback,
    handle_punishment_reason, PunishmentStates
)

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log', encoding='utf-8'),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

async def global_error_handler(event: ErrorEvent):
    logger.error(f"Global error: {event.exception}", exc_info=event.exception)
    await send_error_log("Global Error", str(event.exception))

async def background_tasks():
    """–§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã"""
    while True:
        try:
            # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã
            cleanup_old_data()
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
            processed = process_message_queue()
            if processed > 0:
                logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {processed} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –æ—á–µ—Ä–µ–¥–∏")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
            if db and (not hasattr(db, 'connection') or not db.connection.is_connected()):
                logger.warning("üì° –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MySQL...")
                db.connect()
            
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
            health = get_system_health()
            if health.get('database', {}).get('status') == 'online':
                logger.debug("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≤ –Ω–æ—Ä–º–µ")
            else:
                logger.warning("‚ö†Ô∏è  –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –ë–î")
            
            await asyncio.sleep(300)  # –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ: {e}")
            await asyncio.sleep(60)

async def database_health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    while True:
        try:
            if db and hasattr(db, 'connection') and db.connection.is_connected():
                # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–º
                with db.get_cursor() as cursor:
                    cursor.execute("SELECT 1")
                    logger.debug("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: OK")
            else:
                logger.warning("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
                
            await asyncio.sleep(300)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è –ë–î: {e}")
            await asyncio.sleep(60)

async def cache_cleanup_task():
    """–ó–∞–¥–∞—á–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞"""
    while True:
        try:
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫—ç—à–∏ —Ä–∞–∑ –≤ —á–∞—Å
            cache_stats = get_cache_stats()
            logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞: {cache_stats}")
            
            await asyncio.sleep(3600)  # –ö–∞–∂–¥—ã–π —á–∞—Å
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–¥–∞—á–∏ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞: {e}")
            await asyncio.sleep(300)

async def startup_tasks():
    """–ó–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω—è–µ–º—ã–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    logger.info("üöÄ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á –∑–∞–ø—É—Å–∫–∞...")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã
    try:
        load_initial_data()
        logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(user_levels)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Ä–æ–≤–Ω–µ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    try:
        set_user_level(Config.MODERATOR_ID, 1)
        set_user_level(Config.OWNER_ID, 3)
        logger.info("‚úÖ –£—Ä–æ–≤–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —É—Ä–æ–≤–Ω–µ–π: {e}")
    
    # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    try:
        cleanup_old_data()
        logger.info("‚úÖ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã
    try:
        health = get_system_health()
        logger.info(f"üè• –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã: {health}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã: {e}")

async def shutdown_tasks():
    """–ó–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω—è–µ–º—ã–µ –ø—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏ –±–æ—Ç–∞"""
    logger.info("üõë –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á –≤—ã–∫–ª—é—á–µ–Ω–∏—è...")
    
    # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π
    if db and hasattr(db, 'connection'):
        db.disconnect()
        logger.info("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ")
    
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã –Ω–∞–∫–∞–∑–∞–Ω–∏–π
    if 'punishment_system' in globals():
        await punishment_system.stop()
        logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –Ω–∞–∫–∞–∑–∞–Ω–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫—ç—à–∞
    try:
        cache_stats = get_cache_stats()
        logger.info(f"üíæ –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞: {cache_stats}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞: {e}")

async def main():
    try:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        Config.validate()
        logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö MySQL
        if not init_database(
            Config.MYSQL_HOST,
            Config.MYSQL_USER, 
            Config.MYSQL_PASSWORD,
            Config.MYSQL_DATABASE
        ):
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ MySQL")
            return
        
        logger.info("‚úÖ MySQL –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis –¥–ª—è FSM
        storage = RedisStorage.from_url('redis://localhost:6379/0')
        bot = Bot(token=Config.BOT_TOKEN)
        dp = Dispatcher(storage=storage)
        
        # –ó–∞–¥–∞—á–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        await startup_tasks()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º
        punishment_system = init_punishment_system(bot)
        await punishment_system.start()
        logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –Ω–∞–∫–∞–∑–∞–Ω–∏–π –∑–∞–ø—É—â–µ–Ω–∞")
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫
        dp.errors.register(global_error_handler)
        dp.errors.register(handle_permission_error, ExceptionTypeFilter(TelegramForbiddenError))
        
        # ==================== –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ö–û–ú–ê–ù–î –° –§–ò–õ–¨–¢–†–ê–ú–ò ====================
        
        # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö)
        user_filter = IsPrivateOrOwnerAdmin()
        
        dp.message.register(cmd_start, Command("start") & user_filter)
        dp.message.register(cmd_getid, Command("getid") & user_filter)
        dp.message.register(cmd_help, Command("help") & user_filter)
        dp.message.register(cmd_mystats, Command("mystats") & user_filter)
        
        # –ö–Ω–æ–ø–∫–∏ (—Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö)
        dp.message.register(handle_cancel, F.text == "‚úñÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å" & user_filter)
        dp.message.register(handle_new_message, F.text == "‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ" & user_filter)
        
        # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ (—Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö)
        moderator_filter = IsPrivateOrOwnerAdmin()
        dp.message.register(cmd_pending, Command("pending") & moderator_filter)
        
        # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ (—Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö)
        tech_moderator_filter = IsPrivateOrOwnerAdmin()
        dp.message.register(cmd_checkprofile, Command("checkprofile") & tech_moderator_filter)
        
        # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ (–≤–µ–∑–¥–µ –≥–¥–µ –±–æ—Ç –∞–¥–º–∏–Ω)
        owner_filter = IsOwnerAnywhere()
        
        dp.message.register(cmd_setlevel, Command("setlevel") & owner_filter)
        dp.message.register(cmd_stats, Command("stats") & owner_filter)
        dp.message.register(cmd_users, Command("users") & owner_filter)
        dp.message.register(cmd_mods, Command("mods") & owner_filter)
        dp.message.register(cmd_settings, Command("settings") & owner_filter)
        dp.message.register(cmd_backup, Command("backup") & owner_filter)
        dp.message.register(cmd_status, Command("status") & owner_filter)
        dp.message.register(cmd_emergency, Command("emergency") & owner_filter)
        dp.message.register(cmd_reports, Command("reports") & owner_filter)
        dp.message.register(cmd_system, Command("system") & owner_filter)
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        register_commands(dp)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å rate limiting (—Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö)
        rate_limit = RateLimitFilter(limit=5, period=60)
        content_filter = IsPrivateOrOwnerAdmin()
        
        dp.message.register(handle_text_message, F.text & rate_limit & content_filter)
        dp.message.register(handle_photo_message, F.photo & rate_limit & content_filter)
        dp.message.register(handle_video_message, F.video & rate_limit & content_filter)
        dp.message.register(handle_voice_message, F.voice & rate_limit & content_filter)
        dp.message.register(handle_video_note_message, F.video_note & rate_limit & content_filter)
        dp.message.register(handle_sticker_message, F.sticker & rate_limit & content_filter)
        dp.message.register(handle_document_message, F.document & rate_limit & content_filter)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback'–æ–≤ (–≤–µ–∑–¥–µ)
        dp.callback_query.register(handle_moderation, F.data.startswith("approve_") | F.data.startswith("reject_"))
        dp.callback_query.register(handle_punishment_callback, F.data.startswith("mute_") | F.data.startswith("warn_") | F.data.startswith("ban_"))
        dp.callback_query.register(handle_admin_callback, F.data.startswith("users_") | F.data.startswith("mods_") | 
                                  F.data.startswith("setting_") | F.data.startswith("backup_") | 
                                  F.data.startswith("emergency_") | F.data.startswith("report_"))
        
        dp.message.register(handle_punishment_reason, PunishmentStates.waiting_for_reason)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
        asyncio.create_task(background_tasks())
        asyncio.create_task(database_health_check())
        asyncio.create_task(cache_cleanup_task())
        
        logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        logger.info("üîê –°–∏—Å—Ç–µ–º–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞:")
        logger.info("   üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: –∫–æ–º–∞–Ω–¥—ã —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö")
        logger.info("   üëë –í–ª–∞–¥–µ–ª–µ—Ü: –∫–æ–º–∞–Ω–¥—ã –≤–µ–∑–¥–µ –≥–¥–µ –±–æ—Ç –∞–¥–º–∏–Ω")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–ª–∏–Ω–≥
        await dp.start_polling(bot)
        
    except Exception as e:
        logger.critical(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞: {e}", exc_info=True)
        await shutdown_tasks()
        sys.exit(1)

if __name__ == "__main__":
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ graceful shutdown
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        asyncio.run(shutdown_tasks())
    except Exception as e:
        logger.critical(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        asyncio.run(shutdown_tasks())
        sys.exit(1)
