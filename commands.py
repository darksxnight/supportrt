from aiogram import types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
import datetime
import json
import asyncio
import psutil
import os

from config import Config
from storage import pending_messages, user_levels, moderator_stats, get_punishments, punishments

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def create_moderation_keyboard(message_id):
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{message_id}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{message_id}")
        ]
    ])

def get_cancel_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚úñÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å")]
        ],
        resize_keyboard=True
    )

def get_start_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")]
        ],
        resize_keyboard=True
    )

def create_punishment_keyboard(user_id):
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üîá –ó–∞–≥–ª—É—à–∫–∞", callback_data=f"mute_{user_id}"),
            InlineKeyboardButton(text="‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", callback_data=f"warn_{user_id}")
        ],
        [
            InlineKeyboardButton(text="üö´ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞", callback_data=f"ban_{user_id}")
        ]
    ])

def create_admin_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users"),
            InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin_settings")
        ],
        [
            InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"),
            InlineKeyboardButton(text="üîß –£—Ç–∏–ª–∏—Ç—ã", callback_data="admin_tools")
        ]
    ])

system_settings = {
    'auto_moderation': False,
    'max_messages_per_hour': 5,
    'blacklist_words': ['—Å–ø–∞–º', '–æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏–µ', '—Ä–µ–∫–ª–∞–º–∞'],
    'notifications_enabled': True
}

async def cmd_start(message: types.Message):
    welcome_text = """
üöÄ –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ–ª–æ–≤–µ–∫—É, –∫–æ—Ç–æ—Ä—ã–π –æ–ø—É–±–ª–∏–∫–æ–≤–∞–ª —ç—Ç—É —Å—Å—ã–ª–∫—É

üñä –ù–∞–ø–∏—à–∏—Ç–µ —Å—é–¥–∞ –≤—Å—ë, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –µ–º—É –ø–µ—Ä–µ–¥–∞—Ç—å, –∏ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –æ–Ω –ø–æ–ª—É—á–∏—Ç –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–æ –Ω–µ –±—É–¥–µ—Ç –∑–Ω–∞—Ç—å –æ—Ç –∫–æ–≥–æ

–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–∂–Ω–æ —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, üí¨ —Ç–µ–∫—Å—Ç, üîä –≥–æ–ª–æ—Å–æ–≤—ã–µ, üì∑ –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏—è (–∫—Ä—É–∂–∫–∏), –∞ —Ç–∞–∫–∂–µ ‚ú® —Å—Ç–∏–∫–µ—Ä—ã
    """
    await message.answer(welcome_text, reply_markup=get_cancel_keyboard())

async def handle_cancel(message: types.Message):
    if message.text == "‚úñÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å":
        cancel_text = "üôÇ‚Äç‚ÜïÔ∏è –ú—ã –∂–¥—ë–º –≤–∞—à–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ"
        await message.answer(cancel_text, reply_markup=get_start_keyboard())
        return True
    return False

async def handle_new_message(message: types.Message):
    if message.text == "‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ":
        await cmd_start(message)
        return True
    return False

async def handle_buttons(message: types.Message):
    if await handle_cancel(message):
        return True
    if await handle_new_message(message):
        return True
    return False

async def cmd_pending(message: types.Message):
    user_level = user_levels.get(message.from_user.id, 0)
    
    if user_level < 1:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    if not pending_messages:
        await message.answer("üì≠ –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –æ–∂–∏–¥–∞–Ω–∏–∏ –º–æ–¥era—Ü–∏–∏")
        return
    
    count = 0
    for msg_id, msg_data in pending_messages.items():
        if msg_data['user_id'] == message.from_user.id:
            continue
            
        if count >= 5:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ–∫–∞–∑ 5 —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            await message.answer("üìã –ü–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /pending —Å–Ω–æ–≤–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ª–µ–¥—É—é—â–∏—Ö.")
            break
            
        if msg_data['type'] == 'text':
            await message.answer(
                f"üì® –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ (ID: {msg_id}):\n\n{msg_data['content']}",
                reply_markup=create_moderation_keyboard(msg_id)
            )
        elif msg_data['type'] == 'photo':
            await message.answer_photo(
                msg_data['file_id'],
                caption=f"üì® –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ (ID: {msg_id})\n\n{msg_data.get('caption', '')}",
                reply_markup=create_moderation_keyboard(msg_id)
            )
        elif msg_data['type'] == 'video':
            await message.answer_video(
                msg_data['file_id'],
                caption=f"üì® –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ (ID: {msg_id})\n\n{msg_data.get('caption', '')}",
                reply_markup=create_moderation_keyboard(msg_id)
            )
        elif msg_data['type'] == 'voice':
            await message.answer_voice(
                msg_data['file_id'],
                caption=f"üì® –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ (ID: {msg_id})",
                reply_markup=create_moderation_keyboard(msg_id)
            )
        
        count += 1
        await asyncio.sleep(0.5)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏

async def cmd_checkprofile(message: types.Message):
    user_level = user_levels.get(message.from_user.id, 0)
    
    if user_level < 2:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    if not message.reply_to_message:
        await message.answer("‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ–≥–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
        return
    
    target_id = message.reply_to_message.from_user.id
    target_level = user_levels.get(target_id, 0)
    
    if target_level < 1:
        await message.answer("‚ùå –≠—Ç–æ –Ω–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä")
        return
    
    stats = moderator_stats.get(target_id, {'approved': 0, 'rejected': 0, 'reviewed': 0, 'warnings': 0})
    user_punishments = get_punishments(target_id)
    
    profile_text = f"ü™™ –ü—Ä–æ—Ñ–∏–ª—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞\n\n"
    profile_text += f"üë§ –ù–∏–∫–Ω–µ–π–º: @{message.reply_to_message.from_user.username or '–Ω–µ—Ç'}\n"
    profile_text += f"üìõ –ò–º—è: {message.reply_to_message.from_user.first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}"
    if message.reply_to_message.from_user.last_name:
        profile_text += f" {message.reply_to_message.from_user.last_name}"
    profile_text += f"\n‚ÑπÔ∏è –î–æ–ª–∂–Ω–æ—Å—Ç—å: {'–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä' if target_level == 1 else '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –º–æ–¥–µ—Ä–∞—Ç–æ—Ä' if target_level == 2 else '–í–ª–∞–¥–µ–ª–µ—Ü'}\n"
    profile_text += f"üî¢ ID: {target_id}\n"
    profile_text += f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {datetime.datetime.now().strftime('%d.%m.%Y')}\n\n"
    profile_text += f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏:\n"
    profile_text += f"üü¢ –û–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö: {stats['approved']}\n"
    profile_text += f"üî¥ –û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö: {stats['rejected']}\n"
    profile_text += f"üìÇ –í—Å–µ–≥–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–æ: {stats['reviewed']}\n"
    profile_text += f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {stats['warnings']}\n"
    
    if user_level >= 2:
        profile_text += f"\nüìú –ò—Å—Ç–æ—Ä–∏—è –Ω–∞–∫–∞–∑–∞–Ω–∏–π:\n"
        profile_text += f"üîá –ó–∞–≥–ª—É—à–µ–∫: {user_punishments['mutes']}\n"
        profile_text += f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {user_punishments['warnings']}\n"
        profile_text += f"üö´ –ë–ª–æ–∫–∏—Ä–æ–≤–æ–∫: {user_punishments['bans']}\n"
    
    await message.answer(profile_text, reply_markup=create_punishment_keyboard(target_id))

async def cmd_setlevel(message: types.Message):
    if user_levels.get(message.from_user.id, 0) != 3:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    try:
        args = message.text.split()
        if len(args) != 3:
            await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setlevel <user_id> <—É—Ä–æ–≤–µ–Ω—å>")
            return
        
        target_id = int(args[1])
        level = int(args[2])
        
        if level not in [0, 1, 2, 3]:
            await message.answer("‚ùå –£—Ä–æ–≤–µ–Ω—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ 3")
            return
        
        from storage import set_user_level
        set_user_level(target_id, level)
        
        level_names = {
            0: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
            1: "–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä", 
            2: "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –º–æ–¥–µ—Ä–∞—Ç–æ—Ä",
            3: "–í–ª–∞–¥–µ–ª–µ—Ü"
        }
        
        await message.answer(f"‚úÖ –£—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞: {level} ({level_names[level]})")
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /setlevel <user_id> <—É—Ä–æ–≤–µ–Ω—å>")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

async def cmd_help(message: types.Message):
    user_id = message.from_user.id
    user_level = user_levels.get(user_id, 0)
    
    if user_level == 0:
        help_text = """
ü§ñ **–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É** - –£—Ä–æ–≤–µ–Ω—å: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å

üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/getid - –ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–π ID
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

üìù **–ö–∞–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:**
1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –≥–æ–ª–æ—Å–æ–≤–æ–µ –∏–ª–∏ —Å—Ç–∏–∫–µ—Ä
3. –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é
4. –û–∂–∏–¥–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ

‚ö°Ô∏è **–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:**
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: 1000 —Å–∏–º–≤–æ–ª–æ–≤
‚Ä¢ –ù–µ –±–æ–ª–µ–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Å
        """
    
    elif user_level == 1:
        help_text = """
ü§ñ **–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É** - –£—Ä–æ–≤–µ–Ω—å: –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä

üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º  
/getid - –ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–π ID
/pending - –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

üëÆ **–§—É–Ω–∫—Ü–∏–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞:**
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –æ—á–µ—Ä–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
‚Ä¢ –û–¥–æ–±—Ä–µ–Ω–∏–µ/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
‚Ä¢ –ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ—Ä–∞—Ü–∏—è
        """
    
    elif user_level == 2:
        help_text = """
ü§ñ **–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É** - –£—Ä–æ–≤–µ–Ω—å: –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –º–æ–¥–µ—Ä–∞—Ç–æ—Ä

üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/getid - –ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–π ID  
/pending - –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
/checkprofile - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

‚öôÔ∏è **–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
‚Ä¢ –í—ã–¥–∞—á–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–≥–ª—É—à–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        """
    
    else:
        help_text = """
ü§ñ **–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É** - –£—Ä–æ–≤–µ–Ω—å: –í–ª–∞–¥–µ–ª–µ—Ü

üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/getid - –ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–π ID
/pending - –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
/checkprofile - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã
/users - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
/mods - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏
/settings - –°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
/backup - –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
/emergency - –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
/reports - –û—Ç—á–µ—Ç—ã –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
/setlevel - –ò–∑–º–µ–Ω–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

üéØ **–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**
‚Ä¢ –ü–æ–ª–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ —Å–∏—Å—Ç–µ–º–æ–π
‚Ä¢ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
‚Ä¢ –°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
‚Ä¢ –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
‚Ä¢ –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        """
    
    await message.answer(help_text, parse_mode="Markdown")

async def cmd_getid(message: types.Message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    
    response = f"üÜî –í–∞—à–∏ ID:\n\n"
    response += f"üë§ User ID: `{user_id}`\n"
    response += f"üí¨ Chat ID: `{chat_id}`\n\n"
    response += "üìã –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–∏ ID –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞"
    
    await message.answer(response, parse_mode="Markdown")

async def cmd_stats(message: types.Message):
    if user_levels.get(message.from_user.id, 0) != 3:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    total_users = len(user_levels)
    moderators = sum(1 for level in user_levels.values() if level >= 1)
    total_messages = sum(stats.get('reviewed', 0) for stats in moderator_stats.values())
    approved = sum(stats.get('approved', 0) for stats in moderator_stats.values())
    rejected = sum(stats.get('rejected', 0) for stats in moderator_stats.values())
    
    approval_rate = round((approved / total_messages * 100) if total_messages > 0 else 0, 1)
    rejection_rate = round((rejected / total_messages * 100) if total_messages > 0 else 0, 1)
    
    stats_text = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã\n\n"
    stats_text += f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
    stats_text += f"üëÆ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤: {moderators}\n"
    stats_text += f"üì® –°–æ–æ–±—â–µ–Ω–∏–π –≤—Å–µ–≥–æ: {total_messages}\n"
    stats_text += f"‚úÖ –û–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö: {approved} ({approval_rate}%)\n"
    stats_text += f"‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö: {rejected} ({rejection_rate}%)\n"
    stats_text += f"üìÇ –í –æ–∂–∏–¥–∞–Ω–∏–∏: {len(pending_messages)}\n\n"
    
    # –¢–æ–ø –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
    top_mods = sorted(
        [(uid, stats.get('reviewed', 0)) for uid, stats in moderator_stats.items()], 
        key=lambda x: x[1], 
        reverse=True
    )[:3]
    
    if top_mods:
        stats_text += f"üèÜ –¢–æ–ø –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤:\n"
        for i, (mod_id, actions) in enumerate(top_mods, 1):
            stats_text += f"{i}. ID {mod_id} - {actions} –¥–µ–π—Å—Ç–≤–∏–π\n"
    
    stats_text += f"\n‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.datetime.now().strftime('%H:%M:%S')}"
    
    await message.answer(stats_text)

async def cmd_users(message: types.Message):
    if user_levels.get(message.from_user.id, 0) != 3:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="users_list")],
        [InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="users_search")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="users_stats")],
        [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="users_refresh")]
    ])
    
    total_users = len(user_levels)
    active_today = total_users  # –ó–∞–≥–ª—É—à–∫–∞, –Ω—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    
    users_text = f"üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏\n\n"
    users_text += f"üìä –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
    users_text += f"üéØ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {active_today}\n"
    users_text += f"üìà –ù–æ–≤—ã—Ö –∑–∞ —Å—É—Ç–∫–∏: {min(15, total_users)}"  # –ó–∞–≥–ª—É—à–∫–∞
    
    await message.answer(users_text, reply_markup=keyboard)

async def cmd_mods(message: types.Message):
    if user_levels.get(message.from_user.id, 0) != 3:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    mods = [uid for uid, level in user_levels.items() if level >= 1]
    
    if not mods:
        await message.answer("üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤")
        return
    
    mods_text = "üë• –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã —Å–∏—Å—Ç–µ–º—ã\n\n"
    
    for i, mod_id in enumerate(mods, 1):
        stats = moderator_stats.get(mod_id, {'approved': 0, 'rejected': 0, 'reviewed': 0, 'warnings': 0})
        level_name = "–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä" if user_levels[mod_id] == 1 else "–¢–µ—Ö. –º–æ–¥–µ—Ä–∞—Ç–æ—Ä" if user_levels[mod_id] == 2 else "–í–ª–∞–¥–µ–ª–µ—Ü"
        mods_text += f"{i}. ID: {mod_id} | {level_name}\n"
        mods_text += f"   ‚úÖ {stats['approved']} | ‚ùå {stats['rejected']} | ‚ö†Ô∏è {stats['warnings']}\n\n"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="mods_detailed")],
        [InlineKeyboardButton(text="üõë –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞", callback_data="mods_ban")],
        [InlineKeyboardButton(text="‚ö°Ô∏è –ò–∑–º–µ–Ω–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å", callback_data="mods_level")],
        [InlineKeyboardButton(text="üìã –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV", callback_data="mods_export")]
    ])
    
    await message.answer(mods_text, reply_markup=keyboard)

async def cmd_settings(message: types.Message):
    if user_levels.get(message.from_user.id, 0) != 3:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    settings_text = f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã\n\n"
    settings_text += f"ü§ñ –ê–≤—Ç–æ-–º–æ–¥–µ—Ä–∞—Ü–∏—è: {'‚úÖ –í–∫–ª' if system_settings['auto_moderation'] else '‚ùå –í—ã–∫–ª'}\n"
    settings_text += f"üìù –ú–∞–∫—Å. —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Å: {system_settings['max_messages_per_hour']}\n"
    settings_text += f"üö´ –ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤: {len(system_settings['blacklist_words'])} —Å–ª–æ–≤\n"
    settings_text += f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {'‚úÖ –í–∫–ª' if system_settings['notifications_enabled'] else '‚ùå –í—ã–∫–ª'}\n"
    settings_text += f"üõ°Ô∏è –£—Ä–æ–≤–µ–Ω—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: –°—Ä–µ–¥–Ω–∏–π\n"
    settings_text += f"üíæ –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö: –ü–∞–º—è—Ç—å\n"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üîß –ê–≤—Ç–æ-–º–æ–¥–µ—Ä–∞—Ü–∏—è", callback_data="setting_auto_mod"),
            InlineKeyboardButton(text="üìù –õ–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π", callback_data="setting_msg_limit")
        ],
        [
            InlineKeyboardButton(text="üö´ –ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫", callback_data="setting_blacklist"),
            InlineKeyboardButton(text="üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="setting_notifications")
        ],
        [
            InlineKeyboardButton(text="üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", callback_data="setting_security"),
            InlineKeyboardButton(text="üíæ –•—Ä–∞–Ω–µ–Ω–∏–µ", callback_data="setting_storage")
        ],
        [InlineKeyboardButton(text="üîÑ –°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="setting_reset")]
    ])
    
    await message.answer(settings_text, reply_markup=keyboard)

async def cmd_backup(message: types.Message):
    if user_levels.get(message.from_user.id, 0) != 3:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    backup_data = {
        'users': {k: v for k, v in user_levels.items()},
        'moderator_stats': {k: v for k, v in moderator_stats.items()},
        'punishments': {k: v for k, v in punishments.items()},
        'timestamp': datetime.datetime.now().isoformat(),
        'version': '1.0.0'
    }
    
    backup_size = len(json.dumps(backup_data))
    
    backup_text = f"üíæ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ backup\n\n"
    backup_text += f"üì¶ –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {backup_size} –±–∞–π—Ç\n"
    backup_text += f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(backup_data['users'])}\n"
    backup_text += f"üëÆ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤: {len(backup_data['moderator_stats'])}\n"
    backup_text += f"‚è∞ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {datetime.datetime.now().strftime('%H:%M:%S')}\n"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üíæ –°–æ–∑–¥–∞—Ç—å backup", callback_data="backup_create")],
        [InlineKeyboardButton(text="üì§ –≠–∫—Å–ø–æ—Ä—Ç –≤ JSON", callback_data="backup_export")],
        [InlineKeyboardButton(text="üì• –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data="backup_restore")],
        [InlineKeyboardButton(text="üîÑ –ê–≤—Ç–æ-–±—ç–∫–∞–ø", callback_data="backup_auto")]
    ])
    
    await message.answer(backup_text, reply_markup=keyboard)

async def cmd_status(message: types.Message):
    if user_levels.get(message.from_user.id, 0) != 3:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    process = psutil.Process(os.getpid())
    memory_usage = process.memory_info().rss / 1024 / 1024  # MB
    
    status_text = f"üñ•Ô∏è –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã\n\n"
    status_text += f"ü§ñ –ë–æ—Ç: ‚úÖ Online\n"
    status_text += f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {len(user_levels)} –≤ –ø–∞–º—è—Ç–∏\n"
    status_text += f"üì® –°–æ–æ–±—â–µ–Ω–∏–π –≤ –æ–∂–∏–¥–∞–Ω–∏–∏: {len(pending_messages)}\n"
    status_text += f"üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π: {len(user_levels)}\n"
    status_text += f"üíæ –ü–∞–º—è—Ç—å: {memory_usage:.1f} MB\n"
    status_text += f"üîÑ Uptime: {datetime.datetime.now().strftime('%H:%M:%S')}\n\n"
    status_text += f"üìà –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:\n"
    status_text += f"‚Ä¢ CPU: {psutil.cpu_percent()}%\n"
    status_text += f"‚Ä¢ RAM: {psutil.virtual_memory().percent}%\n"
    status_text += f"‚Ä¢ –î–∏—Å–∫: {psutil.disk_usage('/').percent}%"
    
    await message.answer(status_text)

async def cmd_emergency(message: types.Message):
    if user_levels.get(message.from_user.id, 0) != 3:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    emergency_text = "üö® –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã\n\n"
    emergency_text += "‚ö†Ô∏è  –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–∏ –∫–æ–º–∞–Ω–¥—ã —Ç–æ–ª—å–∫–æ –≤ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö!\n"
    emergency_text += "–î–µ–π—Å—Ç–≤–∏—è –º–æ–≥—É—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞.\n\n"
    emergency_text += "üî¥ –ö—Ä–∞—Å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ - –Ω–µ–æ–±—Ä–∞—Ç–∏–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è\n"
    emergency_text += "üü° –ñ–µ–ª—Ç—ã–µ –∫–Ω–æ–ø–∫–∏ - –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è\n"
    emergency_text += "üü¢ –ó–µ–ª–µ–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞", callback_data="emergency_stop")],
        [InlineKeyboardButton(text="üßπ –û—á–∏—Å—Ç–∏—Ç—å –æ—á–µ—Ä–µ–¥—å", callback_data="emergency_clear")],
        [InlineKeyboardButton(text="üîï –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="emergency_mute")],
        [InlineKeyboardButton(text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", callback_data="emergency_broadcast")],
        [InlineKeyboardButton(text="üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥", callback_data="emergency_reload")],
        [InlineKeyboardButton(text="üìã –°—Ç–∞—Ç—É—Å —Å–ª—É–∂–±", callback_data="emergency_services")]
    ])
    
    await message.answer(emergency_text, reply_markup=keyboard)

async def cmd_reports(message: types.Message):
    if user_levels.get(message.from_user.id, 0) != 3:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    today = datetime.datetime.now().strftime('%d.%m.%Y')
    total_today = sum([stats.get('reviewed', 0) for stats in moderator_stats.values()])
    
    report_text = f"üìà –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç\n\n"
    report_text += f"üìÖ {today}\n"
    report_text += "‚Äï" * 20 + "\n"
    report_text += f"üì® –°–æ–æ–±—â–µ–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è: {total_today}\n"
    report_text += f"‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ: {sum([stats.get('approved', 0) for stats in moderator_stats.values()])}\n"
    report_text += f"‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {sum([stats.get('rejected', 0) for stats in moderator_stats.values()])}\n"
    report_text += f"üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(user_levels)}\n"
    report_text += f"üëÆ –ê–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤: {sum(1 for uid, level in user_levels.items() if level >= 1)}\n\n"
    
    # –¢–æ–ø –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∑–∞ –¥–µ–Ω—å
    top_mods = sorted(
        [(uid, stats.get('reviewed', 0)) for uid, stats in moderator_stats.items()], 
        key=lambda x: x[1], 
        reverse=True
    )[:3]
    
    if top_mods:
        report_text += "üèÜ –¢–æ–ø –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∑–∞ –¥–µ–Ω—å:\n"
        for i, (mod_id, actions) in enumerate(top_mods, 1):
            report_text += f"{i}. ID {mod_id} - {actions} –¥–µ–π—Å—Ç–≤–∏–π\n"
    
    report_text += f"\nüìä –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {round((total_today / len(user_levels) * 100) if user_levels else 0, 1)}%"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç", callback_data="report_detailed")],
        [InlineKeyboardButton(text="üìÖ –ó–∞ –ø–µ—Ä–∏–æ–¥", callback_data="report_period")],
        [InlineKeyboardButton(text="üì§ –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV", callback_data="report_export")],
        [InlineKeyboardButton(text="üìß –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –ø–æ—á—Ç—É", callback_data="report_email")]
    ])
    
    await message.answer(report_text, reply_markup=keyboard)

async def handle_admin_callback(callback: types.CallbackQuery):
    data = callback.data
    user_level = user_levels.get(callback.from_user.id, 0)
    
    if user_level != 3:
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤")
        return
    
    if data == "users_list":
        users_list = "\n".join([f"ID: {uid} | –£—Ä–æ–≤–µ–Ω—å: {level}" for uid, level in list(user_levels.items())[:10]])
        await callback.message.answer(f"üë• –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n{users_list}")
        await callback.answer()
    
    elif data == "emergency_clear":
        pending_messages.clear()
        await callback.message.answer("‚úÖ –û—á–µ—Ä–µ–¥—å –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –æ—á–∏—â–µ–Ω–∞")
        await callback.answer()
    
    elif data == "setting_auto_mod":
        system_settings['auto_moderation'] = not system_settings['auto_moderation']
        status = "–≤–∫–ª—é—á–µ–Ω–∞" if system_settings['auto_moderation'] else "–≤—ã–∫–ª—é—á–µ–Ω–∞"
        await callback.message.answer(f"‚úÖ –ê–≤—Ç–æ-–º–æ–¥–µ—Ä–∞—Ü–∏—è {status}")
        await callback.answer()
    
    elif data == "backup_create":
        await callback.message.answer("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ backup...")
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è backup
        await asyncio.sleep(1)
        await callback.message.answer("‚úÖ Backup —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω")
        await callback.answer()
    
    else:
        await callback.answer("‚öôÔ∏è –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
async def cmd_admin(message: types.Message):
    if user_levels.get(message.from_user.id, 0) != 3:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    admin_text = "üë®‚Äçüíª –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n"
    admin_text += "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π:"
    
    await message.answer(admin_text, reply_markup=create_admin_keyboard())

async def cmd_cleanup(message: types.Message):
    if user_levels.get(message.from_user.id, 0) != 3:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    old_count = len(pending_messages)
    # –û—á–∏—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤
    current_time = datetime.datetime.now()
    to_delete = []
    
    for msg_id, msg_data in pending_messages.items():
        if 'timestamp' in msg_data:
            msg_time = datetime.datetime.fromisoformat(msg_data['timestamp'])
            if (current_time - msg_time).total_seconds() > 86400:  # 24 —á–∞—Å–∞
                to_delete.append(msg_id)
    
    for msg_id in to_delete:
        del pending_messages[msg_id]
    
    await message.answer(f"üßπ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£–¥–∞–ª–µ–Ω–æ {len(to_delete)} –∏–∑ {old_count} —Å–æ–æ–±—â–µ–Ω–∏–π")

async def cmd_broadcast(message: types.Message):
    if user_levels.get(message.from_user.id, 0) != 3:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    try:
        # –§–æ—Ä–º–∞—Ç: /broadcast –¢–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏
        broadcast_text = message.text.split(' ', 1)[1]
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="broadcast_confirm")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="broadcast_cancel")]
        ])
        
        await message.answer(
            f"üì¢ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É:\n\n{broadcast_text}\n\n"
            f"–ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {len(user_levels)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
            reply_markup=keyboard
        )
        
    except IndexError:
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /broadcast <—Ç–µ–∫—Å—Ç>")

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
def register_commands(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–µ"""
    dp.message.register(cmd_admin, Command("admin"))
    dp.message.register(cmd_cleanup, Command("cleanup"))
    dp.message.register(cmd_broadcast, Command("broadcast"))
