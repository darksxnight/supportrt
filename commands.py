from aiogram import types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
import datetime
import json

from config import Config
from storage import pending_messages, user_levels, moderator_stats, get_punishments, punishments
from keyboards import create_moderation_keyboard, get_cancel_keyboard, get_start_keyboard, create_punishment_keyboard

system_settings = {
    'auto_moderation': False,
    'max_messages_per_hour': 5,
    'blacklist_words': ['—Å–ø–∞–º', '–æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏–µ', '—Ä–µ–∫–ª–∞–º–∞'],
    'notifications_enabled': True
}

def get_cancel_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚úñÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å")]
        ],
        resize_keyboard=True
    )

def get_start_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")]
        ],
        resize_keyboard=True
    )

async def cmd_start(message: types.Message):
    welcome_text = """
üöÄ –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ–ª–æ–≤–µ–∫—É, –∫–æ—Ç–æ—Ä—ã–π –æ–ø—É–±–ª–∏–∫–æ–≤–∞–ª —ç—Ç—É —Å—Å—ã–ª–∫—É

üñä –ù–∞–ø–∏—à–∏—Ç–µ —Å—é–¥–∞ –≤—Å—ë, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –µ–º—É –ø–µ—Ä–µ–¥–∞—Ç—å, –∏ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –æ–Ω –ø–æ–ª—É—á–∏—Ç –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–æ –Ω–µ –±—É–¥–µ—Ç –∑–Ω–∞—Ç—å –æ—Ç –∫–æ–≥–æ

–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–∂–Ω–æ —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, üí¨ —Ç–µ–∫—Å—Ç, üîä –≥–æ–ª–æ—Å–æ–≤—ã–µ, üì∑ –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏—è (–∫—Ä—É–∂–∫–∏), –∞ —Ç–∞–∫–∂–µ ‚ú® —Å—Ç–∏–∫–µ—Ä—ã
    """
    await message.answer(welcome_text, reply_markup=get_cancel_keyboard())

async def handle_cancel(message: types.Message):
    if message.text == "‚úñÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å":
        cancel_text = "üôÇ‚Äç‚ÜïÔ∏è –ú—ã –∂–¥—ë–º –≤–∞—à–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ"
        await message.answer(cancel_text, reply_markup=get_start_keyboard())
        return True
    return False

async def handle_new_message(message: types.Message):
    if message.text == "‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ":
        await cmd_start(message)
        return True
    return False

async def handle_buttons(message: types.Message):
    if await handle_cancel(message):
        return True
    if await handle_new_message(message):
        return True
    return False

async def cmd_pending(message: types.Message):
    user_level = user_levels.get(message.from_user.id, 0)
    
    if user_level < 1:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    if not pending_messages:
        await message.answer("üì≠ –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –æ–∂–∏–¥–∞–Ω–∏–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏")
        return
    
    for msg_id, msg_data in pending_messages.items():
        if msg_data['user_id'] == message.from_user.id:
            continue
            
        if msg_data['type'] == 'text':
            await message.answer(
                f"üì® –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏:\n\n{msg_data['content']}",
                reply_markup=create_moderation_keyboard(msg_id)
            )
        elif msg_data['type'] == 'photo':
            await message.answer_photo(
                msg_data['file_id'],
                caption=msg_data.get('caption', ''),
                reply_markup=create_moderation_keyboard(msg_id)
            )

async def cmd_checkprofile(message: types.Message):
    user_level = user_levels.get(message.from_user.id, 0)
    
    if user_level < 2:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    if not message.reply_to_message:
        await message.answer("‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ–≥–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
        return
    
    target_id = message.reply_to_message.from_user.id
    target_level = user_levels.get(target_id, 0)
    
    if target_level < 1:
        await message.answer("‚ùå –≠—Ç–æ –Ω–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä")
        return
    
    stats = moderator_stats.get(target_id, {'approved': 0, 'rejected': 0, 'reviewed': 0, 'warnings': 0})
    user_punishments = get_punishments(target_id)
    
    profile_text = f"ü™™ –ù–∏–∫–Ω–µ–π–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞: @{message.reply_to_message.from_user.username}\n"
    profile_text += f"‚ÑπÔ∏è –î–æ–ª–∂–Ω–æ—Å—Ç—å: {'–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä' if target_level == 1 else '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –º–æ–¥–µ—Ä–∞—Ç–æ—Ä' if target_level == 2 else '–í–ª–∞–¥–µ–ª–µ—Ü'}\n"
    profile_text += f"‚ùî ID: {target_id}\n"
    profile_text += f"üü¢ –û–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {stats['approved']}\n"
    profile_text += f"üî¥ –û—Ç–∫–∞–∑–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {stats['rejected']}\n"
    profile_text += f"üìÇ –†–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {stats['reviewed']}\n"
    profile_text += f"‚ô¶Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {stats['warnings']}\n"
    
    if user_level >= 2:
        profile_text += f"üìú –í—ã–¥–∞–Ω–æ –Ω–∞–∫–∞–∑–∞–Ω–∏–π: {user_punishments['mutes']} –∑–∞–≥–ª—É—à–∫–∏, {user_punishments['warnings']} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è, {user_punishments['bans']} –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏\n"
    
    await message.answer(profile_text, reply_markup=create_punishment_keyboard(target_id))

async def cmd_setlevel(message: types.Message):
    if user_levels.get(message.from_user.id, 0) != 3:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    try:
        args = message.text.split()
        if len(args) != 3:
            await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setlevel <user_id> <—É—Ä–æ–≤–µ–Ω—å>")
            return
        
        target_id = int(args[1])
        level = int(args[2])
        
        if level not in [0, 1, 2, 3]:
            await message.answer("‚ùå –£—Ä–æ–≤–µ–Ω—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ 3")
            return
        
        from storage import set_user_level
        set_user_level(target_id, level)
        await message.answer(f"‚úÖ –£—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {level}")
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã")

async def cmd_help(message: types.Message):
    user_id = message.from_user.id
    user_level = user_levels.get(user_id, 0)
    
    if user_level == 0:
        help_text = """
ü§ñ **–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É** - –£—Ä–æ–≤–µ–Ω—å: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å

üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/getid - –ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–π ID
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

üìù **–ö–∞–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:**
1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –≥–æ–ª–æ—Å–æ–≤–æ–µ –∏–ª–∏ —Å—Ç–∏–∫–µ—Ä
3. –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é
4. –û–∂–∏–¥–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
        """
    
    elif user_level == 1:
        help_text = """
ü§ñ **–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É** - –£—Ä–æ–≤–µ–Ω—å: –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä

üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º  
/getid - –ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–π ID
/pending - –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
        """
    
    elif user_level == 2:
        help_text = """
ü§ñ **–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É** - –£—Ä–æ–≤–µ–Ω—å: –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –º–æ–¥–µ—Ä–∞—Ç–æ—Ä

üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/getid - –ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–π ID  
/pending - –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
/checkprofile - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
        """
    
    else:
        help_text = """
ü§ñ **–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É** - –£—Ä–æ–≤–µ–Ω—å: –í–ª–∞–¥–µ–ª–µ—Ü

üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/getid - –ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–π ID
/pending - –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
/checkprofile - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã
/users - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
/mods - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏
/settings - –°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
/backup - –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
/emergency - –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
/reports - –û—Ç—á–µ—Ç—ã –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
/setlevel - –ò–∑–º–µ–Ω–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
        """
    
    await message.answer(help_text, parse_mode="Markdown")

async def cmd_getid(message: types.Message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    
    response = f"üÜî –í–∞—à–∏ ID:\n\n"
    response += f"üë§ User ID: `{user_id}`\n"
    response += f"üí¨ Chat ID: `{chat_id}`\n\n"
    response += "üìã –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–∏ ID –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞"
    
    await message.answer(response, parse_mode="Markdown")

async def cmd_stats(message: types.Message):
    if user_levels.get(message.from_user.id, 0) != 3:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    total_users = len(user_levels)
    total_messages = sum([stats['reviewed'] for stats in moderator_stats.values()])
    approved = sum([stats['approved'] for stats in moderator_stats.values()])
    rejected = sum([stats['rejected'] for stats in moderator_stats.values()])
    
    approval_rate = round((approved / total_messages * 100) if total_messages > 0 else 0, 1)
    rejection_rate = round((rejected / total_messages * 100) if total_messages > 0 else 0, 1)
    
    stats_text = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã\n\n"
    stats_text += f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {total_users}\n"
    stats_text += f"üì® –°–æ–æ–±—â–µ–Ω–∏–π –≤—Å–µ–≥–æ: {total_messages}\n"
    stats_text += f"‚úÖ –û–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö: {approved} ({approval_rate}%)\n"
    stats_text += f"‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö: {rejected} ({rejection_rate}%)\n"
    stats_text += f"üìÇ –í –æ–∂–∏–¥–∞–Ω–∏–∏: {len(pending_messages)}\n\n"
    stats_text += f"‚ö°Ô∏è –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:\n"
    stats_text += f"‚Ä¢ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ –æ–Ω–ª–∞–π–Ω: {sum(1 for uid, level in user_levels.items() if level >= 1)}\n"
    stats_text += f"‚Ä¢ –î–µ–π—Å—Ç–≤–∏–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {total_messages}"
    
    await message.answer(stats_text)

async def cmd_users(message: types.Message):
    if user_levels.get(message.from_user.id, 0) != 3:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="users_list")],
        [InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="users_search")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="users_stats")]
    ])
    
    await message.answer("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", reply_markup=keyboard)

async def cmd_mods(message: types.Message):
    if user_levels.get(message.from_user.id, 0) != 3:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    mods = [uid for uid, level in user_levels.items() if level >= 1]
    
    if not mods:
        await message.answer("üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤")
        return
    
    mods_text = "üë• –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã —Å–∏—Å—Ç–µ–º—ã\n\n"
    
    for i, mod_id in enumerate(mods, 1):
        stats = moderator_stats.get(mod_id, {'approved': 0, 'rejected': 0, 'reviewed': 0, 'warnings': 0})
        mods_text += f"{i}. ID: {mod_id} | –£—Ä–æ–≤–µ–Ω—å: {user_levels[mod_id]}\n"
        mods_text += f"   ‚úÖ {stats['approved']} | ‚ùå {stats['rejected']} | ‚ö†Ô∏è {stats['warnings']}\n\n"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="mods_detailed")],
        [InlineKeyboardButton(text="üõë –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞", callback_data="mods_ban")],
        [InlineKeyboardButton(text="‚ö°Ô∏è –ò–∑–º–µ–Ω–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å", callback_data="mods_level")]
    ])
    
    await message.answer(mods_text, reply_markup=keyboard)

async def cmd_settings(message: types.Message):
    if user_levels.get(message.from_user.id, 0) != 3:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    settings_text = f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã\n\n"
    settings_text += f"–ê–≤—Ç–æ-–º–æ–¥–µ—Ä–∞—Ü–∏—è: {'‚úÖ' if system_settings['auto_moderation'] else '‚ùå'}\n"
    settings_text += f"–ú–∞–∫—Å. —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Å: {system_settings['max_messages_per_hour']}\n"
    settings_text += f"–ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤: {len(system_settings['blacklist_words'])} —Å–ª–æ–≤\n"
    settings_text += f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {'‚úÖ' if system_settings['notifications_enabled'] else '‚ùå'}\n"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üîß –ê–≤—Ç–æ-–º–æ–¥–µ—Ä–∞—Ü–∏—è", callback_data="setting_auto_mod"),
            InlineKeyboardButton(text="üìù –õ–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π", callback_data="setting_msg_limit")
        ],
        [
            InlineKeyboardButton(text="üö´ –ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫", callback_data="setting_blacklist"),
            InlineKeyboardButton(text="üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="setting_notifications")
        ],
        [InlineKeyboardButton(text="üîÑ –°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="setting_reset")]
    ])
    
    await message.answer(settings_text, reply_markup=keyboard)

async def cmd_backup(message: types.Message):
    if user_levels.get(message.from_user.id, 0) != 3:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    backup_data = {
        'users': {k: v for k, v in user_levels.items()},
        'moderator_stats': {k: v for k, v in moderator_stats.items()},
        'punishments': {k: v for k, v in punishments.items()},
        'timestamp': datetime.datetime.now().isoformat()
    }
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üíæ –°–æ–∑–¥–∞—Ç—å backup", callback_data="backup_create")],
        [InlineKeyboardButton(text="üì§ –≠–∫—Å–ø–æ—Ä—Ç –≤ JSON", callback_data="backup_export")],
        [InlineKeyboardButton(text="üì• –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data="backup_restore")]
    ])
    
    await message.answer("üíæ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ backup", reply_markup=keyboard)

async def cmd_status(message: types.Message):
    if user_levels.get(message.from_user.id, 0) != 3:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–∞")
        return
    
    status_text = f"üñ•Ô∏è –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã\n\n"
    status_text += f"–ë–æ—Ç: ‚úÖ Online\n"
    status_text += f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {len(user_levels)} –≤ –ø–∞–º—è—Ç–∏\n"
    status_text += f"–°–æ–æ–±—â–µ–Ω–∏–π –≤ –æ–∂–∏–¥–∞–Ω–∏–∏: {len(pending_messages)}\n"
    status_text += f"–õ–æ–≥–∏: ‚úÖ –ê–∫—Ç–∏–≤–Ω—ã\n\n"
    status_text += f"üìà –ó–∞–≥—Ä—É–∑–∫–∞:\n"
    status_text += f"‚Ä¢ –ü–∞–º—è—Ç—å: ~{len(str(user_levels)) + len(str(moderator_stats))} KB\n"
    status_text += f"‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {datetime.datetime.now().strftime('%H:%M:%S')}"
    
    await message.answer(status_text)

async def cmd_emergency(message: types.Message):
    if user_levels.get(message.from_user.id, 0) != 3:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞", callback_data="emergency_stop")],
        [InlineKeyboardButton(text="üßπ –û—á–∏—Å—Ç–∏—Ç—å –æ—á–µ—Ä–µ–¥—å", callback_data="emergency_clear")],
        [InlineKeyboardButton(text="üîï –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="emergency_mute")],
        [InlineKeyboardButton(text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", callback_data="emergency_broadcast")]
    ])
    
    await message.answer("üö® –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å—é!", reply_markup=keyboard)

async def cmd_reports(message: types.Message):
    if user_levels.get(message.from_user.id, 0) != 3:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    report_text = f"üìà –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç\n\n"
    report_text += f"üìÖ {datetime.datetime.now().strftime('%d %B %Y')}\n"
    report_text += "‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî\n"
    report_text += f"üì® –°–æ–æ–±—â–µ–Ω–∏–π: {sum([stats['reviewed'] for stats in moderator_stats.values()])}\n"
    report_text += f"‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ: {sum([stats['approved'] for stats in moderator_stats.values()])}\n"
    report_text += f"‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {sum([stats['rejected'] for stats in moderator_stats.values()])}\n"
    report_text += f"üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(user_levels)}\n\n"
    
    top_mods = sorted(
        [(uid, stats['reviewed']) for uid, stats in moderator_stats.items()], 
        key=lambda x: x[1], 
        reverse=True
    )[:3]
    
    if top_mods:
        report_text += "üèÜ –¢–æ–ø –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤:\n"
        for i, (mod_id, actions) in enumerate(top_mods, 1):
            report_text += f"{i}. ID {mod_id} - {actions} –¥–µ–π—Å—Ç–≤–∏–π\n"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç", callback_data="report_detailed")],
        [InlineKeyboardButton(text="üìÖ –ó–∞ –ø–µ—Ä–∏–æ–¥", callback_data="report_period")],
        [InlineKeyboardButton(text="üì§ –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV", callback_data="report_export")]
    ])
    
    await message.answer(report_text, reply_markup=keyboard)

async def handle_admin_callback(callback: types.CallbackQuery):
    data = callback.data
    user_level = user_levels.get(callback.from_user.id, 0)
    
    if user_level != 3:
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤")
        return
    
    if data == "users_list":
        users_list = "\n".join([f"ID: {uid} | –£—Ä–æ–≤–µ–Ω—å: {level}" for uid, level in user_levels.items()][:10])
        await callback.message.answer(f"üë• –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n{users_list}")
    
    elif data == "emergency_clear":
        pending_messages.clear()
        await callback.message.answer("‚úÖ –û—á–µ—Ä–µ–¥—å –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –æ—á–∏—â–µ–Ω–∞")
    
    elif data == "setting_auto_mod":
        system_settings['auto_moderation'] = not system_settings['auto_moderation']
        status = "–≤–∫–ª—é—á–µ–Ω–∞" if system_settings['auto_moderation'] else "–≤—ã–∫–ª—é—á–µ–Ω–∞"
        await callback.message.answer(f"‚úÖ –ê–≤—Ç–æ-–º–æ–¥–µ—Ä–∞—Ü–∏—è {status}")
    
    await callback.answer()