from typing import Dict, List, Any, Optional
from datetime import datetime, timedelta
import logging
from database import db

logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
user_levels: Dict[int, int] = {}
moderator_stats: Dict[int, Dict[str, int]] = {}
pending_messages: Dict[int, Dict[str, Any]] = {}
punishments: Dict[int, List[Dict[str, Any]]] = {}
active_punishments: Dict[int, Dict[str, Any]] = {}
user_message_count: Dict[int, Dict[str, int]] = {}  # –î–ª—è rate limiting

def init_punishment_system(bot):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –Ω–∞–∫–∞–∑–∞–Ω–∏–π"""
    from punishment_system import PunishmentSystem
    return PunishmentSystem(bot)

# ==================== –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –î–ê–ù–ù–´–ú–ò ====================

def get_user_level(user_id: int) -> int:
    """–ü–æ–ª—É—á–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        if user_id in user_levels:
            return user_levels[user_id]
        
        level = db.get_user_level(user_id)
        user_levels[user_id] = level  # –ö—ç—à–∏—Ä—É–µ–º
        return level
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return 0

def set_user_level(user_id: int, level: int):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        db.set_user_level(user_id, level)
        user_levels[user_id] = level  # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
        logger.info(f"‚úÖ –£—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {level}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —É—Ä–æ–≤–Ω—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

def update_moderator_stats(moderator_id: int, action: str):
    """–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        db.update_moderator_stats(moderator_id, action)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
        if moderator_id not in moderator_stats:
            moderator_stats[moderator_id] = {'approved': 0, 'rejected': 0, 'reviewed': 0, 'warnings': 0}
        
        if action in moderator_stats[moderator_id]:
            moderator_stats[moderator_id][action] += 1
            moderator_stats[moderator_id]['reviewed'] += 1
            
        logger.debug(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ {moderator_id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {action}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ {moderator_id}: {e}")

def add_message(message_data: Dict[str, Any]) -> int:
    """–î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
    try:
        message_id = db.add_message(message_data)
        pending_messages[message_id] = message_data  # –ö—ç—à–∏—Ä—É–µ–º
        logger.debug(f"üì® –°–æ–æ–±—â–µ–Ω–∏–µ {message_id} –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å")
        return message_id
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return -1

def get_message(message_id: int) -> Optional[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        if message_id in pending_messages:
            return pending_messages[message_id]
        
        message = db.get_message(message_id)
        if message:
            pending_messages[message_id] = message  # –ö—ç—à–∏—Ä—É–µ–º
        return message
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è {message_id}: {e}")
        return None

def delete_message(message_id: int):
    """–£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        db.delete_message(message_id)
        pending_messages.pop(message_id, None)  # –£–¥–∞–ª—è–µ–º –∏–∑ –∫—ç—à–∞
        logger.debug(f"üóëÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ {message_id} —É–¥–∞–ª–µ–Ω–æ")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è {message_id}: {e}")

def get_punishments(user_id: int) -> Dict[str, int]:
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞–∫–∞–∑–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        punishments_list = db.get_punishments(user_id)
        result = {'mutes': 0, 'warnings': 0, 'bans': 0}
        
        for p in punishments_list:
            punishment_type = p['punishment_type']
            if punishment_type in result:
                result[punishment_type] = p['count']
                
        return result
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∫–∞–∑–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return {'mutes': 0, 'warnings': 0, 'bans': 0}

def can_send_message(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ (rate limiting)"""
    try:
        now = datetime.now()
        hour_ago = now - timedelta(hours=1)
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å –∏–∑ –±–∞–∑—ã
        # (—ç—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è, –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Redis –¥–ª—è rate limiting)
        from database import db
        with db.get_cursor() as cursor:
            cursor.execute("""
                SELECT COUNT(*) as count FROM pending_messages 
                WHERE user_id = %s AND created_at >= %s
            """, (user_id, hour_ago))
            result = cursor.fetchone()
            message_count = result['count'] if result else 0
        
        can_send = message_count < 5  # –ú–∞–∫—Å–∏–º—É–º 5 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Å
        
        if not can_send:
            logger.warning(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–µ–≤—ã—Å–∏–ª –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π: {message_count}/5")
            
        return can_send
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è {user_id}: {e}")
        return True  # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ä–∞–∑—Ä–µ—à–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É

# ==================== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –ö–≠–®–ï–ú ====================

def load_initial_data():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    global user_levels, pending_messages
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        user_levels.update(db.get_all_user_levels())
        logger.info(f"üë• –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(user_levels)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏
        pending_messages.update(db.get_all_pending_messages())
        logger.info(f"üì® –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(pending_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –æ—á–µ—Ä–µ–¥–∏")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
        # (–Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥ –≤ database.py)
        moderators = [uid for uid, level in user_levels.items() if level >= 1]
        for mod_id in moderators:
            stats = db.get_moderator_stats(mod_id)
            moderator_stats[mod_id] = stats
        
        logger.info(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è {len(moderator_stats)} –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")

def cleanup_old_data():
    """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    try:
        db.cleanup_old_data()
        
        # –¢–∞–∫–∂–µ –æ—á–∏—â–∞–µ–º –∫—ç—à –æ—Ç —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        current_time = datetime.now()
        to_delete = []
        
        for msg_id, msg_data in pending_messages.items():
            if 'created_at' in msg_data:
                msg_time = datetime.fromisoformat(msg_data['created_at'].replace('Z', '+00:00'))
                if (current_time - msg_time).total_seconds() > 86400:  # 24 —á–∞—Å–∞
                    to_delete.append(msg_id)
        
        for msg_id in to_delete:
            del pending_messages[msg_id]
        
        logger.info(f"üßπ –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö: —É–¥–∞–ª–µ–Ω–æ {len(to_delete)} —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫—ç—à–∞")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

def clear_cache():
    """–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞"""
    global user_levels, moderator_stats, pending_messages, punishments, active_punishments
    user_levels.clear()
    moderator_stats.clear()
    pending_messages.clear()
    punishments.clear()
    active_punishments.clear()
    logger.info("üóëÔ∏è –ö—ç—à –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω")

def get_cache_stats() -> Dict[str, int]:
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞"""
    return {
        'users': len(user_levels),
        'moderators': len(moderator_stats),
        'pending_messages': len(pending_messages),
        'punishments': len(punishments),
        'active_punishments': len(active_punishments)
    }

# ==================== –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ====================

def get_user_info(user_id: int) -> Optional[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    try:
        from database import db
        with db.get_cursor() as cursor:
            cursor.execute("SELECT * FROM users WHERE user_id = %s", (user_id,))
            return cursor.fetchone()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {user_id}: {e}")
        return None

def get_moderator_leaderboard(limit: int = 10) -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤"""
    try:
        from database import db
        with db.get_cursor() as cursor:
            cursor.execute("""
                SELECT moderator_id, approved, rejected, reviewed, warnings 
                FROM moderator_stats 
                ORDER BY reviewed DESC 
                LIMIT %s
            """, (limit,))
            return cursor.fetchall()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤: {e}")
        return []

def get_system_stats() -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    try:
        from database import db
        stats = {}
        
        with db.get_cursor() as cursor:
            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            cursor.execute("SELECT COUNT(*) as count FROM users")
            stats['total_users'] = cursor.fetchone()['count']
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
            cursor.execute("SELECT COUNT(*) as count FROM users WHERE level >= 1")
            stats['moderators'] = cursor.fetchone()['count']
            
            # –°–æ–æ–±—â–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏
            cursor.execute("SELECT COUNT(*) as count FROM pending_messages WHERE expires_at > NOW()")
            stats['pending_messages'] = cursor.fetchone()['count']
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
            cursor.execute("SELECT SUM(approved) as approved, SUM(rejected) as rejected, SUM(reviewed) as reviewed FROM moderator_stats")
            moderation_stats = cursor.fetchone()
            stats.update(moderation_stats)
            
        return stats
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return {}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
if db and db.connection and db.connection.is_connected():
    load_initial_data()
