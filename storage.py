from typing import Dict, List, Any, Optional, Tuple
from datetime import datetime, timedelta
import logging
import time
import hashlib
import uuid
from database import db
from redis_storage import RedisStorage

logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis
redis_storage = RedisStorage()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
user_levels: Dict[int, int] = {}
moderator_stats: Dict[int, Dict[str, int]] = {}
pending_messages: Dict[int, Dict[str, Any]] = {}
user_statistics: Dict[int, Dict[str, Any]] = {}

def init_punishment_system(bot):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –Ω–∞–∫–∞–∑–∞–Ω–∏–π"""
    from punishment_system import PunishmentSystem
    return PunishmentSystem(bot)

# ==================== –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò –° REDIS –ö–≠–®–ò–†–û–í–ê–ù–ò–ï–ú ====================

def get_user_level(user_id: int) -> int:
    """–ü–æ–ª—É—á–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≤ Redis"""
    cache_key = f"user_level:{user_id}"
    
    # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ Redis –∫—ç—à–∞
    cached_level = redis_storage.cache_get(cache_key)
    if cached_level is not None:
        return cached_level
    
    # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ memory –∫—ç—à–∞
    if user_id in user_levels:
        redis_storage.cache_set(cache_key, user_levels[user_id], 3600)  # –ö—ç—à –Ω–∞ 1 —á–∞—Å
        return user_levels[user_id]
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    try:
        level = db.get_user_level(user_id)
        user_levels[user_id] = level
        redis_storage.cache_set(cache_key, level, 3600)
        return level
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return 0

def set_user_level(user_id: int, level: int):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –∫—ç—à–µ–π"""
    try:
        db.set_user_level(user_id, level)
        user_levels[user_id] = level
        
        # –û–±–Ω–æ–≤–ª—è–µ–º Redis –∫—ç—à
        cache_key = f"user_level:{user_id}"
        redis_storage.cache_set(cache_key, level, 3600)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        db.add_audit_log(
            user_id=0,  # system
            action_type="user_level_change",
            action_details={"user_id": user_id, "new_level": level, "old_level": user_levels.get(user_id, 0)}
        )
        
        logger.info(f"‚úÖ –£—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {level}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —É—Ä–æ–≤–Ω—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

def update_moderator_stats(moderator_id: int, action: str, moderation_time: int = 0):
    """–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    try:
        db.update_moderator_stats(moderator_id, action, moderation_time)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º memory –∫—ç—à
        if moderator_id not in moderator_stats:
            moderator_stats[moderator_id] = {'approved': 0, 'rejected': 0, 'reviewed': 0, 'warnings': 0}
        
        if action in moderator_stats[moderator_id]:
            moderator_stats[moderator_id][action] += 1
            moderator_stats[moderator_id]['reviewed'] += 1
        
        # –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º Redis –∫—ç—à
        redis_storage.cache_delete(f"mod_stats:{moderator_id}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        db.update_moderation_analytics(action == 'approved', moderation_time)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ {moderator_id}: {e}")

def add_message(message_data: Dict[str, Any]) -> int:
    """–î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    try:
        message_id = db.add_message(message_data)
        pending_messages[message_id] = message_data
        
        # –ö—ç—à–∏—Ä—É–µ–º –≤ Redis
        redis_storage.cache_set(f"message:{message_id}", message_data, 1800)  # 30 –º–∏–Ω—É—Ç
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        db.add_audit_log(
            user_id=message_data['user_id'],
            action_type="message_created",
            action_details={"message_id": message_id, "type": message_data['type']}
        )
        
        logger.debug(f"üì® –°–æ–æ–±—â–µ–Ω–∏–µ {message_id} –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å")
        return message_id
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return -1

def get_message(message_id: int) -> Optional[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    try:
        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ memory –∫—ç—à–∞
        if message_id in pending_messages:
            return pending_messages[message_id]
        
        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ Redis –∫—ç—à–∞
        cached_message = redis_storage.cache_get(f"message:{message_id}")
        if cached_message:
            pending_messages[message_id] = cached_message
            return cached_message
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        message = db.get_message(message_id)
        if message:
            pending_messages[message_id] = message
            redis_storage.cache_set(f"message:{message_id}", message, 1800)
        
        return message
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è {message_id}: {e}")
        return None

def update_message_status(message_id: int, approved: bool, moderation_time: int):
    """–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    try:
        message = get_message(message_id)
        if not message:
            return
        
        db.update_message_status(message_id, approved, moderation_time)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db.update_user_statistics(message['user_id'], approved, moderation_time)
        
        # –£–¥–∞–ª—è–µ–º –∏–∑ –∫—ç—à–µ–π
        pending_messages.pop(message_id, None)
        redis_storage.cache_delete(f"message:{message_id}")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –º–æ–¥–µ—Ä–∞—Ü–∏—é
        db.add_audit_log(
            user_id=0,  # system
            action_type="message_moderated",
            action_details={
                "message_id": message_id, 
                "approved": approved, 
                "moderation_time": moderation_time,
                "user_id": message['user_id']
            }
        )
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–æ–±—â–µ–Ω–∏—è {message_id}: {e}")

def delete_message(message_id: int):
    """–£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—á–∏—Å—Ç–∫–æ–π –∫—ç—à–µ–π"""
    try:
        db.delete_message(message_id)
        pending_messages.pop(message_id, None)
        redis_storage.cache_delete(f"message:{message_id}")
        logger.debug(f"üóëÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ {message_id} —É–¥–∞–ª–µ–Ω–æ")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è {message_id}: {e}")

# ==================== –ü–ï–†–°–û–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô ====================

def get_user_statistics(user_id: int) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    cache_key = f"user_stats:{user_id}"
    
    # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ Redis –∫—ç—à–∞
    cached_stats = redis_storage.cache_get(cache_key)
    if cached_stats:
        return cached_stats
    
    # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ memory –∫—ç—à–∞
    if user_id in user_statistics:
        redis_storage.cache_set(cache_key, user_statistics[user_id], 300)  # 5 –º–∏–Ω—É—Ç
        return user_statistics[user_id]
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    try:
        stats = db.get_user_statistics(user_id)
        user_statistics[user_id] = stats
        redis_storage.cache_set(cache_key, stats, 300)
        return stats
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return {
            'user_id': user_id,
            'total_messages': 0,
            'approved_messages': 0,
            'rejected_messages': 0,
            'avg_moderation_time': 0,
            'success_rate': 0
        }

def get_detailed_user_stats(user_id: int) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    base_stats = get_user_statistics(user_id)
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã
    try:
        with db.get_cursor() as cursor:
            # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º
            cursor.execute("""
                SELECT DATE(created_at) as date, COUNT(*) as count 
                FROM pending_messages 
                WHERE user_id = %s 
                GROUP BY DATE(created_at) 
                ORDER BY date DESC 
                LIMIT 7
            """, (user_id,))
            daily_activity = cursor.fetchall()
            
            # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º —Å–æ–æ–±—â–µ–Ω–∏–π
            cursor.execute("""
                SELECT message_type, COUNT(*) as count 
                FROM pending_messages 
                WHERE user_id = %s 
                GROUP BY message_type
            """, (user_id,))
            message_types = cursor.fetchall()
            
            # –í—Ä–µ–º—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –ø–æ percentiles
            cursor.execute("""
                SELECT 
                    AVG(moderation_time) as avg_time,
                    MIN(moderation_time) as min_time,
                    MAX(moderation_time) as max_time,
                    PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY moderation_time) as median_time
                FROM pending_messages 
                WHERE user_id = %s AND moderation_time > 0
            """, (user_id,))
            time_stats = cursor.fetchone() or {}
            
        return {
            **base_stats,
            'daily_activity': daily_activity,
            'message_types': message_types,
            'time_stats': time_stats,
            'user_rank': calculate_user_rank(user_id),
            'performance_score': calculate_performance_score(base_stats)
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return base_stats

def calculate_user_rank(user_id: int) -> int:
    """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–∞–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö"""
    try:
        with db.get_cursor() as cursor:
            cursor.execute("""
                SELECT user_id, success_rate, total_messages,
                       RANK() OVER (ORDER BY success_rate DESC, total_messages DESC) as user_rank
                FROM user_statistics 
                WHERE total_messages >= 5
            """)
            ranks = {row['user_id']: row['user_rank'] for row in cursor.fetchall()}
            return ranks.get(user_id, 0)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞–Ω–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return 0

def calculate_performance_score(stats: Dict[str, Any]) -> float:
    """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –æ–±—â–∏–π score –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        if stats['total_messages'] == 0:
            return 0.0
        
        # –í–µ—Å–æ–≤—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
        success_weight = 0.6
        activity_weight = 0.3
        speed_weight = 0.1
        
        # –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        success_score = min(stats['success_rate'] / 100, 1.0)
        activity_score = min(stats['total_messages'] / 50, 1.0)  # –º–∞–∫—Å 50 —Å–æ–æ–±—â–µ–Ω–∏–π
        speed_score = 1.0 - min(stats['avg_moderation_time'] / 3600, 1.0)  # –º–∞–∫—Å 1 —á–∞—Å
        
        return round((
            success_score * success_weight +
            activity_score * activity_weight +
            speed_score * speed_weight
        ) * 100, 1)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ performance score: {e}")
        return 0.0

# ==================== –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –ë–ê–ù–û–í ====================

def add_advanced_ban(user_id: int, ban_type: str, identifier: str, 
                    reason: str, duration: int, moderator_id: int) -> bool:
    """–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –±–∞–Ω"""
    try:
        ban_data = {
            'user_id': user_id,
            'ban_type': ban_type,
            'identifier': identifier,
            'reason': reason,
            'duration': duration,
            'moderator_id': moderator_id
        }
        
        ban_id = db.add_advanced_ban(ban_data)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if ban_type == 'account':
            with db.get_cursor() as cursor:
                cursor.execute("""
                    UPDATE users 
                    SET is_banned = TRUE, ban_reason = %s, 
                        ban_expires_at = DATE_ADD(NOW(), INTERVAL %s SECOND),
                        ban_count = ban_count + 1
                    WHERE user_id = %s
                """, (reason, duration, user_id))
        
        # –ö—ç—à–∏—Ä—É–µ–º –±–∞–Ω –≤ Redis –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        redis_storage.cache_set(
            f"ban:{ban_type}:{identifier}", 
            {'banned': True, 'expires_at': datetime.now() + timedelta(seconds=duration)},
            duration
        )
        
        # –õ–æ–≥–∏—Ä—É–µ–º –±–∞–Ω
        db.add_audit_log(
            user_id=moderator_id,
            action_type="user_banned",
            action_details={
                "user_id": user_id,
                "ban_type": ban_type,
                "reason": reason,
                "duration": duration,
                "ban_id": ban_id
            }
        )
        
        logger.info(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–∞–Ω–µ–Ω –ø–æ {ban_type}: {reason}")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–∞–Ω–∞: {e}")
        return False

def check_advanced_ban(identifier: str, ban_type: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –±–∞–Ω–∞"""
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º Redis –∫—ç—à
    cache_key = f"ban:{ban_type}:{identifier}"
    cached_ban = redis_storage.cache_get(cache_key)
    if cached_ban and cached_ban['banned']:
        return True
    
    # –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    try:
        return db.check_advanced_ban(identifier, ban_type)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–Ω–∞: {e}")
        return False

def get_user_bans(user_id: int) -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –±–∞–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        with db.get_cursor() as cursor:
            cursor.execute("""
                SELECT * FROM advanced_bans 
                WHERE user_id = %s 
                ORDER BY created_at DESC
            """, (user_id,))
            return cursor.fetchall()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return []

# ==================== –ê–£–î–ò–¢ –ò –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ====================

def add_audit_log(user_id: int, action_type: str, action_details: Dict[str, Any],
                 ip_address: str = None, user_agent: str = None):
    """–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –≤ –ª–æ–≥ –∞—É–¥–∏—Ç–∞"""
    try:
        db.add_audit_log(user_id, action_type, action_details, ip_address, user_agent)
        
        # –¢–∞–∫–∂–µ –ø–∏—à–µ–º –≤ Redis –¥–ª—è real-time –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        log_entry = {
            'timestamp': datetime.now().isoformat(),
            'user_id': user_id,
            'action_type': action_type,
            'action_details': action_details
        }
        
        redis_storage.queue_push("audit_logs", log_entry)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–∞ –∞—É–¥–∏—Ç–∞: {e}")

def get_audit_logs(user_id: int = None, limit: int = 100) -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏ –∞—É–¥–∏—Ç–∞"""
    try:
        return db.get_audit_logs(user_id, limit)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤ –∞—É–¥–∏—Ç–∞: {e}")
        return []

# ==================== –ê–ù–ê–õ–ò–¢–ò–ö–ê –ú–û–î–ï–†–ê–¶–ò–ò ====================

def get_moderation_analytics(date: str = None) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
    cache_key = f"mod_analytics:{date or 'today'}"
    
    cached_analytics = redis_storage.cache_get(cache_key)
    if cached_analytics:
        return cached_analytics
    
    try:
        analytics = db.get_moderation_analytics(date)
        redis_storage.cache_set(cache_key, analytics, 300)  # 5 –º–∏–Ω—É—Ç
        return analytics
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {e}")
        return {
            'date': date or datetime.now().strftime('%Y-%m-%d'),
            'total_messages': 0,
            'approved_count': 0,
            'rejected_count': 0,
            'avg_moderation_time': 0
        }

def get_moderation_leaderboard(limit: int = 10) -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤"""
    cache_key = f"mod_leaderboard:{limit}"
    
    cached_leaderboard = redis_storage.cache_get(cache_key)
    if cached_leaderboard:
        return cached_leaderboard
    
    try:
        with db.get_cursor() as cursor:
            cursor.execute("""
                SELECT m.moderator_id, u.username, 
                       m.approved, m.rejected, m.reviewed, 
                       m.avg_moderation_time, m.efficiency,
                       RANK() OVER (ORDER BY m.efficiency DESC, m.reviewed DESC) as rank
                FROM moderator_stats m
                LEFT JOIN users u ON m.moderator_id = u.user_id
                WHERE m.reviewed > 0
                ORDER BY m.efficiency DESC, m.reviewed DESC
                LIMIT %s
            """, (limit,))
            
            leaderboard = cursor.fetchall()
            redis_storage.cache_set(cache_key, leaderboard, 600)  # 10 –º–∏–Ω—É—Ç
            return leaderboard
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤: {e}")
        return []

def get_daily_moderation_stats(days: int = 7) -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∑–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π"""
    cache_key = f"daily_mod_stats:{days}"
    
    cached_stats = redis_storage.cache_get(cache_key)
    if cached_stats:
        return cached_stats
    
    try:
        with db.get_cursor() as cursor:
            cursor.execute("""
                SELECT date, total_messages, approved_count, rejected_count,
                       avg_moderation_time,
                       ROUND((approved_count / total_messages * 100), 1) as approval_rate
                FROM moderation_analytics
                WHERE date >= DATE_SUB(CURDATE(), INTERVAL %s DAY)
                ORDER BY date DESC
            """, (days,))
            
            stats = cursor.fetchall()
            redis_storage.cache_set(cache_key, stats, 1800)  # 30 –º–∏–Ω—É—Ç
            return stats
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return []

# ==================== –°–ò–°–¢–ï–ú–ù–´–ï –§–£–ù–ö–¶–ò–ò ====================

def load_initial_data():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    global user_levels, pending_messages, user_statistics
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        user_levels.update(db.get_all_user_levels())
        logger.info(f"üë• –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(user_levels)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏
        pending_messages.update(db.get_all_pending_messages())
        logger.info(f"üì® –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(pending_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –æ—á–µ—Ä–µ–¥–∏")
        
        # Pre-cache –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–∞–Ω–æ–≤ –≤ Redis
        pre_cache_active_bans()
        
        logger.info("‚úÖ –ù–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ –∫—ç—à")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")

def pre_cache_active_bans():
    """–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–∞–Ω–æ–≤ –≤ Redis"""
    try:
        active_bans = db.get_active_bans()
        for ban in active_bans:
            cache_key = f"ban:{ban['ban_type']}:{ban['identifier']}"
            expires_in = (ban['expires_at'] - datetime.now()).total_seconds() if ban['expires_at'] else 3600
            
            redis_storage.cache_set(
                cache_key,
                {'banned': True, 'expires_at': ban['expires_at'].isoformat() if ban['expires_at'] else None},
                max(60, int(expires_in))
            )
        
        logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(active_bans)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–∞–Ω–æ–≤ –≤ –∫—ç—à")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –±–∞–Ω–æ–≤: {e}")

def cleanup_old_data():
    """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    try:
        db.cleanup_old_data()
        
        # –¢–∞–∫–∂–µ –æ—á–∏—â–∞–µ–º memory –∫—ç—à –æ—Ç —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        curr
